// Code generated by protoc-gen-go. DO NOT EDIT.
// source: processor.proto

package processor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Session struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VideoSDP             string   `protobuf:"bytes,2,opt,name=videoSDP,proto3" json:"videoSDP,omitempty"`
	AudioSDP             string   `protobuf:"bytes,3,opt,name=audioSDP,proto3" json:"audioSDP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{0}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Session) GetVideoSDP() string {
	if m != nil {
		return m.VideoSDP
	}
	return ""
}

func (m *Session) GetAudioSDP() string {
	if m != nil {
		return m.AudioSDP
	}
	return ""
}

type RTPConfig struct {
	RtpAddress           string   `protobuf:"bytes,1,opt,name=rtpAddress,proto3" json:"rtpAddress,omitempty"`
	AudioRTPPort         int32    `protobuf:"varint,2,opt,name=audioRTPPort,proto3" json:"audioRTPPort,omitempty"`
	VideoRTPPort         int32    `protobuf:"varint,3,opt,name=videoRTPPort,proto3" json:"videoRTPPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RTPConfig) Reset()         { *m = RTPConfig{} }
func (m *RTPConfig) String() string { return proto.CompactTextString(m) }
func (*RTPConfig) ProtoMessage()    {}
func (*RTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{1}
}

func (m *RTPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RTPConfig.Unmarshal(m, b)
}
func (m *RTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RTPConfig.Marshal(b, m, deterministic)
}
func (m *RTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RTPConfig.Merge(m, src)
}
func (m *RTPConfig) XXX_Size() int {
	return xxx_messageInfo_RTPConfig.Size(m)
}
func (m *RTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RTPConfig proto.InternalMessageInfo

func (m *RTPConfig) GetRtpAddress() string {
	if m != nil {
		return m.RtpAddress
	}
	return ""
}

func (m *RTPConfig) GetAudioRTPPort() int32 {
	if m != nil {
		return m.AudioRTPPort
	}
	return 0
}

func (m *RTPConfig) GetVideoRTPPort() int32 {
	if m != nil {
		return m.VideoRTPPort
	}
	return 0
}

type Result struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorKind            string   `protobuf:"bytes,2,opt,name=errorKind,proto3" json:"errorKind,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *Result) GetErrorKind() string {
	if m != nil {
		return m.ErrorKind
	}
	return ""
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Session)(nil), "processor.Session")
	proto.RegisterType((*RTPConfig)(nil), "processor.RTPConfig")
	proto.RegisterType((*Result)(nil), "processor.Result")
}

func init() { proto.RegisterFile("processor.proto", fileDescriptor_6783724e039e1aa6) }

var fileDescriptor_6783724e039e1aa6 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x69, 0x4a, 0xdb, 0x64, 0xf8, 0xf3, 0x17, 0x07, 0x0f, 0xa1, 0x88, 0x48, 0x4e, 0x9e,
	0x0a, 0xd5, 0x4f, 0x20, 0x7a, 0xf3, 0x12, 0xb7, 0xfd, 0x00, 0xc6, 0xee, 0xb4, 0x2c, 0xd4, 0x4c,
	0x9c, 0xd9, 0xe8, 0xd7, 0x97, 0x6c, 0x93, 0x66, 0x05, 0x8f, 0xf3, 0x9b, 0x79, 0xfb, 0x78, 0x6f,
	0xe1, 0xa2, 0x11, 0xde, 0x91, 0x2a, 0xcb, 0xaa, 0x11, 0xf6, 0x8c, 0xd9, 0x19, 0x14, 0xaf, 0xb0,
	0xd8, 0x90, 0xaa, 0xe3, 0x1a, 0xff, 0x43, 0xe2, 0x6c, 0x3e, 0xb9, 0x9d, 0xdc, 0x65, 0x26, 0x71,
	0x16, 0x97, 0x90, 0x7e, 0x39, 0x4b, 0xbc, 0x79, 0x2e, 0xf3, 0x24, 0xd0, 0xf3, 0xdc, 0xed, 0xaa,
	0xd6, 0xba, 0xb0, 0x9b, 0x9e, 0x76, 0xc3, 0x5c, 0x28, 0x64, 0x66, 0x5b, 0x3e, 0x71, 0xbd, 0x77,
	0x07, 0xbc, 0x01, 0x10, 0xdf, 0x3c, 0x5a, 0x2b, 0xa4, 0xda, 0x3f, 0x1e, 0x11, 0x2c, 0xe0, 0x5f,
	0x10, 0x9a, 0x6d, 0x59, 0xb2, 0xf8, 0x60, 0x34, 0x33, 0xbf, 0x58, 0x77, 0x13, 0x8c, 0x87, 0x9b,
	0xe9, 0xe9, 0x26, 0x66, 0xc5, 0x1b, 0xcc, 0x0d, 0x69, 0x7b, 0xf4, 0x9d, 0xa3, 0xb6, 0xbb, 0x2e,
	0xde, 0xbe, 0x3d, 0x06, 0xc7, 0xd4, 0x44, 0x04, 0xaf, 0x21, 0x23, 0x11, 0x96, 0x17, 0x57, 0xdb,
	0x3e, 0xd7, 0x08, 0x30, 0x87, 0xc5, 0x07, 0xa9, 0x56, 0x07, 0xea, 0x73, 0x0d, 0xe3, 0xfd, 0x27,
	0x64, 0xe5, 0x50, 0x1b, 0xae, 0x61, 0xa6, 0xe4, 0xdb, 0x06, 0x71, 0x35, 0x96, 0xdb, 0x17, 0xb9,
	0xbc, 0x8a, 0xd8, 0xd8, 0xc4, 0x1a, 0x52, 0x4f, 0x95, 0x58, 0xfe, 0xae, 0xff, 0x54, 0x5d, 0xc6,
	0xaa, 0x10, 0xe5, 0x7d, 0x1e, 0xbe, 0xeb, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x68, 0x3e,
	0x27, 0xc1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessorClient interface {
	Setup(ctx context.Context, in *Session, opts ...grpc.CallOption) (*RTPConfig, error)
	Teardown(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error)
}

type processorClient struct {
	cc *grpc.ClientConn
}

func NewProcessorClient(cc *grpc.ClientConn) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) Setup(ctx context.Context, in *Session, opts ...grpc.CallOption) (*RTPConfig, error) {
	out := new(RTPConfig)
	err := c.cc.Invoke(ctx, "/processor.Processor/setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) Teardown(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/processor.Processor/teardown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessorServer is the server API for Processor service.
type ProcessorServer interface {
	Setup(context.Context, *Session) (*RTPConfig, error)
	Teardown(context.Context, *Session) (*Result, error)
}

func RegisterProcessorServer(s *grpc.Server, srv ProcessorServer) {
	s.RegisterService(&_Processor_serviceDesc, srv)
}

func _Processor_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processor.Processor/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Setup(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processor.Processor/Teardown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Teardown(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

var _Processor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "processor.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setup",
			Handler:    _Processor_Setup_Handler,
		},
		{
			MethodName: "teardown",
			Handler:    _Processor_Teardown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "processor.proto",
}
