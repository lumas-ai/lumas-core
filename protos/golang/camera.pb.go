// Code generated by protoc-gen-go. DO NOT EDIT.
// source: camera.proto

package lumas

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Result struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorKind            string   `protobuf:"bytes,2,opt,name=errorKind,proto3" json:"errorKind,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *Result) GetErrorKind() string {
	if m != nil {
		return m.ErrorKind
	}
	return ""
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CameraID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CameraID) Reset()         { *m = CameraID{} }
func (m *CameraID) String() string { return proto.CompactTextString(m) }
func (*CameraID) ProtoMessage()    {}
func (*CameraID) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{1}
}

func (m *CameraID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraID.Unmarshal(m, b)
}
func (m *CameraID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraID.Marshal(b, m, deterministic)
}
func (m *CameraID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraID.Merge(m, src)
}
func (m *CameraID) XXX_Size() int {
	return xxx_messageInfo_CameraID.Size(m)
}
func (m *CameraID) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraID.DiscardUnknown(m)
}

var xxx_messageInfo_CameraID proto.InternalMessageInfo

func (m *CameraID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CameraConfig struct {
	Id                   int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Provider             string          `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	ProviderAddress      string          `protobuf:"bytes,4,opt,name=providerAddress,proto3" json:"providerAddress,omitempty"`
	ProviderConfig       *_struct.Struct `protobuf:"bytes,5,opt,name=providerConfig,proto3" json:"providerConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CameraConfig) Reset()         { *m = CameraConfig{} }
func (m *CameraConfig) String() string { return proto.CompactTextString(m) }
func (*CameraConfig) ProtoMessage()    {}
func (*CameraConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{2}
}

func (m *CameraConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraConfig.Unmarshal(m, b)
}
func (m *CameraConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraConfig.Marshal(b, m, deterministic)
}
func (m *CameraConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraConfig.Merge(m, src)
}
func (m *CameraConfig) XXX_Size() int {
	return xxx_messageInfo_CameraConfig.Size(m)
}
func (m *CameraConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CameraConfig proto.InternalMessageInfo

func (m *CameraConfig) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CameraConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CameraConfig) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *CameraConfig) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *CameraConfig) GetProviderConfig() *_struct.Struct {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "lumas.Result")
	proto.RegisterType((*CameraID)(nil), "lumas.CameraID")
	proto.RegisterType((*CameraConfig)(nil), "lumas.CameraConfig")
}

func init() { proto.RegisterFile("camera.proto", fileDescriptor_2f444de3b23b55d1) }

var fileDescriptor_2f444de3b23b55d1 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xdf, 0x6a, 0xab, 0x40,
	0x10, 0x87, 0x31, 0xff, 0x4e, 0x32, 0xc9, 0x49, 0x60, 0x7a, 0xd1, 0x45, 0x42, 0x11, 0xaf, 0xbc,
	0xe9, 0x0a, 0xe9, 0x03, 0x94, 0x92, 0x50, 0x08, 0xbd, 0xb3, 0x2f, 0xd0, 0x8d, 0x3b, 0x5a, 0x41,
	0x5d, 0xd9, 0x75, 0xfb, 0x6e, 0x7d, 0xbb, 0xd2, 0x55, 0xdb, 0xd4, 0xbb, 0x99, 0x6f, 0x7e, 0x3a,
	0xb3, 0x1f, 0x6c, 0x52, 0x51, 0x91, 0x16, 0xbc, 0xd1, 0xaa, 0x55, 0x38, 0x2f, 0x6d, 0x25, 0x8c,
	0xbf, 0xcf, 0x95, 0xca, 0x4b, 0x8a, 0x1d, 0xbc, 0xd8, 0x2c, 0x36, 0xad, 0xb6, 0x69, 0xdb, 0x85,
	0xc2, 0x37, 0x58, 0x24, 0x64, 0x6c, 0xd9, 0xe2, 0x1d, 0x80, 0xb1, 0x69, 0x4a, 0xc6, 0x64, 0xb6,
	0x64, 0x5e, 0xe0, 0x45, 0xcb, 0xe4, 0x8a, 0xe0, 0x1e, 0x56, 0xa4, 0xb5, 0xd2, 0x2f, 0x45, 0x2d,
	0xd9, 0x24, 0xf0, 0xa2, 0x55, 0xf2, 0x0b, 0x90, 0xc1, 0xbf, 0x8a, 0x8c, 0x11, 0x39, 0xb1, 0xa9,
	0x9b, 0x0d, 0x6d, 0xe8, 0xc3, 0xf2, 0xe8, 0xce, 0x3a, 0x9f, 0x70, 0x0b, 0x93, 0x42, 0xba, 0x7f,
	0x4f, 0x93, 0x49, 0x21, 0xc3, 0x4f, 0x0f, 0x36, 0xdd, 0xf0, 0xa8, 0xea, 0xac, 0xc8, 0xc7, 0x01,
	0x44, 0x98, 0xd5, 0xa2, 0xa2, 0x7e, 0x9f, 0xab, 0xd1, 0x87, 0x65, 0xa3, 0xd5, 0x47, 0x21, 0x49,
	0xf7, 0xbb, 0x7e, 0x7a, 0x8c, 0x60, 0x37, 0xd4, 0x4f, 0x52, 0x6a, 0x32, 0x86, 0xcd, 0x5c, 0x64,
	0x8c, 0xf1, 0x11, 0xb6, 0x03, 0xea, 0x76, 0xb3, 0x79, 0xe0, 0x45, 0xeb, 0xc3, 0x2d, 0xef, 0x7c,
	0xf1, 0xc1, 0x17, 0x7f, 0x75, 0xbe, 0x92, 0x51, 0xfc, 0xf0, 0x0e, 0x8b, 0xee, 0x74, 0x8c, 0x61,
	0x25, 0xa4, 0xec, 0x9b, 0x1b, 0xee, 0xb4, 0xf3, 0xeb, 0x67, 0xf9, 0xff, 0x7b, 0xd8, 0xab, 0xbe,
	0x87, 0x75, 0xa3, 0xd5, 0xb7, 0xd8, 0x67, 0x22, 0x89, 0xbb, 0x3f, 0x9f, 0x9c, 0x4f, 0xa3, 0xf8,
	0x65, 0xe1, 0x4e, 0x79, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xee, 0xc8, 0x12, 0xdf, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraClient interface {
	AddCamera(ctx context.Context, in *CameraConfig, opts ...grpc.CallOption) (*Result, error)
	ProcessFeed(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*Result, error)
}

type cameraClient struct {
	cc *grpc.ClientConn
}

func NewCameraClient(cc *grpc.ClientConn) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) AddCamera(ctx context.Context, in *CameraConfig, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas.Camera/addCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) ProcessFeed(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas.Camera/processFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServer is the server API for Camera service.
type CameraServer interface {
	AddCamera(context.Context, *CameraConfig) (*Result, error)
	ProcessFeed(context.Context, *CameraID) (*Result, error)
}

func RegisterCameraServer(s *grpc.Server, srv CameraServer) {
	s.RegisterService(&_Camera_serviceDesc, srv)
}

func _Camera_AddCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).AddCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas.Camera/AddCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).AddCamera(ctx, req.(*CameraConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_ProcessFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).ProcessFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas.Camera/ProcessFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).ProcessFeed(ctx, req.(*CameraID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Camera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lumas.Camera",
	HandlerType: (*CameraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addCamera",
			Handler:    _Camera_AddCamera_Handler,
		},
		{
			MethodName: "processFeed",
			Handler:    _Camera_ProcessFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camera.proto",
}
