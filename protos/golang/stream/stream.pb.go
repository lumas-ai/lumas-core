// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package lumas_core_stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SessionStatus_State int32

const (
	SessionStatus_PLAYING  SessionStatus_State = 0
	SessionStatus_PAUSED   SessionStatus_State = 1
	SessionStatus_TEARDOWN SessionStatus_State = 2
)

var SessionStatus_State_name = map[int32]string{
	0: "PLAYING",
	1: "PAUSED",
	2: "TEARDOWN",
}

var SessionStatus_State_value = map[string]int32{
	"PLAYING":  0,
	"PAUSED":   1,
	"TEARDOWN": 2,
}

func (x SessionStatus_State) String() string {
	return proto.EnumName(SessionStatus_State_name, int32(x))
}

func (SessionStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{2, 0}
}

type Source_StreamType int32

const (
	Source_MJPEG Source_StreamType = 0
	Source_RTP   Source_StreamType = 1
)

var Source_StreamType_name = map[int32]string{
	0: "MJPEG",
	1: "RTP",
}

var Source_StreamType_value = map[string]int32{
	"MJPEG": 0,
	"RTP":   1,
}

func (x Source_StreamType) String() string {
	return proto.EnumName(Source_StreamType_name, int32(x))
}

func (Source_StreamType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{5, 0}
}

type RecordSession struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RtpConfig            *RTPConfig `protobuf:"bytes,3,opt,name=rtpConfig,proto3" json:"rtpConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RecordSession) Reset()         { *m = RecordSession{} }
func (m *RecordSession) String() string { return proto.CompactTextString(m) }
func (*RecordSession) ProtoMessage()    {}
func (*RecordSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *RecordSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordSession.Unmarshal(m, b)
}
func (m *RecordSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordSession.Marshal(b, m, deterministic)
}
func (m *RecordSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSession.Merge(m, src)
}
func (m *RecordSession) XXX_Size() int {
	return xxx_messageInfo_RecordSession.Size(m)
}
func (m *RecordSession) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSession.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSession proto.InternalMessageInfo

func (m *RecordSession) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RecordSession) GetRtpConfig() *RTPConfig {
	if m != nil {
		return m.RtpConfig
	}
	return nil
}

type Session struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source               *Source  `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Session) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type SessionStatus struct {
	State                SessionStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=lumas_core_stream.SessionStatus_State" json:"state,omitempty"`
	SentFrames           int64               `protobuf:"varint,2,opt,name=sentFrames,proto3" json:"sentFrames,omitempty"`
	DroppedFrames        int64               `protobuf:"varint,3,opt,name=droppedFrames,proto3" json:"droppedFrames,omitempty"`
	Annotations          []*Annotation       `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SessionStatus) Reset()         { *m = SessionStatus{} }
func (m *SessionStatus) String() string { return proto.CompactTextString(m) }
func (*SessionStatus) ProtoMessage()    {}
func (*SessionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{2}
}

func (m *SessionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionStatus.Unmarshal(m, b)
}
func (m *SessionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionStatus.Marshal(b, m, deterministic)
}
func (m *SessionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStatus.Merge(m, src)
}
func (m *SessionStatus) XXX_Size() int {
	return xxx_messageInfo_SessionStatus.Size(m)
}
func (m *SessionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStatus proto.InternalMessageInfo

func (m *SessionStatus) GetState() SessionStatus_State {
	if m != nil {
		return m.State
	}
	return SessionStatus_PLAYING
}

func (m *SessionStatus) GetSentFrames() int64 {
	if m != nil {
		return m.SentFrames
	}
	return 0
}

func (m *SessionStatus) GetDroppedFrames() int64 {
	if m != nil {
		return m.DroppedFrames
	}
	return 0
}

func (m *SessionStatus) GetAnnotations() []*Annotation {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type Annotation struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Annotation) Reset()         { *m = Annotation{} }
func (m *Annotation) String() string { return proto.CompactTextString(m) }
func (*Annotation) ProtoMessage()    {}
func (*Annotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{3}
}

func (m *Annotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Annotation.Unmarshal(m, b)
}
func (m *Annotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Annotation.Marshal(b, m, deterministic)
}
func (m *Annotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Annotation.Merge(m, src)
}
func (m *Annotation) XXX_Size() int {
	return xxx_messageInfo_Annotation.Size(m)
}
func (m *Annotation) XXX_DiscardUnknown() {
	xxx_messageInfo_Annotation.DiscardUnknown(m)
}

var xxx_messageInfo_Annotation proto.InternalMessageInfo

func (m *Annotation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RTPConfig struct {
	RtpAddress           string   `protobuf:"bytes,1,opt,name=rtpAddress,proto3" json:"rtpAddress,omitempty"`
	AudioRTPPort         int32    `protobuf:"varint,2,opt,name=audioRTPPort,proto3" json:"audioRTPPort,omitempty"`
	VideoRTPPort         int32    `protobuf:"varint,3,opt,name=videoRTPPort,proto3" json:"videoRTPPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RTPConfig) Reset()         { *m = RTPConfig{} }
func (m *RTPConfig) String() string { return proto.CompactTextString(m) }
func (*RTPConfig) ProtoMessage()    {}
func (*RTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{4}
}

func (m *RTPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RTPConfig.Unmarshal(m, b)
}
func (m *RTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RTPConfig.Marshal(b, m, deterministic)
}
func (m *RTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RTPConfig.Merge(m, src)
}
func (m *RTPConfig) XXX_Size() int {
	return xxx_messageInfo_RTPConfig.Size(m)
}
func (m *RTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RTPConfig proto.InternalMessageInfo

func (m *RTPConfig) GetRtpAddress() string {
	if m != nil {
		return m.RtpAddress
	}
	return ""
}

func (m *RTPConfig) GetAudioRTPPort() int32 {
	if m != nil {
		return m.AudioRTPPort
	}
	return 0
}

func (m *RTPConfig) GetVideoRTPPort() int32 {
	if m != nil {
		return m.VideoRTPPort
	}
	return 0
}

type Source struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 Source_StreamType `protobuf:"varint,2,opt,name=type,proto3,enum=lumas_core_stream.Source_StreamType" json:"type,omitempty"`
	Timing               *Timing           `protobuf:"bytes,4,opt,name=timing,proto3" json:"timing,omitempty"`
	RtpConfig            *RTPConfig        `protobuf:"bytes,5,opt,name=rtpConfig,proto3" json:"rtpConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{5}
}

func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Source) GetType() Source_StreamType {
	if m != nil {
		return m.Type
	}
	return Source_MJPEG
}

func (m *Source) GetTiming() *Timing {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *Source) GetRtpConfig() *RTPConfig {
	if m != nil {
		return m.RtpConfig
	}
	return nil
}

type StreamSourceInfo struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sdp                  string     `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
	HasLiveStream        bool       `protobuf:"varint,3,opt,name=hasLiveStream,proto3" json:"hasLiveStream,omitempty"`
	Timing               *Timing    `protobuf:"bytes,4,opt,name=timing,proto3" json:"timing,omitempty"`
	Sessions             []*Session `protobuf:"bytes,5,rep,name=sessions,proto3" json:"sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StreamSourceInfo) Reset()         { *m = StreamSourceInfo{} }
func (m *StreamSourceInfo) String() string { return proto.CompactTextString(m) }
func (*StreamSourceInfo) ProtoMessage()    {}
func (*StreamSourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{6}
}

func (m *StreamSourceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamSourceInfo.Unmarshal(m, b)
}
func (m *StreamSourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamSourceInfo.Marshal(b, m, deterministic)
}
func (m *StreamSourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamSourceInfo.Merge(m, src)
}
func (m *StreamSourceInfo) XXX_Size() int {
	return xxx_messageInfo_StreamSourceInfo.Size(m)
}
func (m *StreamSourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamSourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StreamSourceInfo proto.InternalMessageInfo

func (m *StreamSourceInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamSourceInfo) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

func (m *StreamSourceInfo) GetHasLiveStream() bool {
	if m != nil {
		return m.HasLiveStream
	}
	return false
}

func (m *StreamSourceInfo) GetTiming() *Timing {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *StreamSourceInfo) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type Timing struct {
	Live                 bool     `protobuf:"varint,1,opt,name=live,proto3" json:"live,omitempty"`
	StartTime            int64    `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime             int64    `protobuf:"varint,3,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timing) Reset()         { *m = Timing{} }
func (m *Timing) String() string { return proto.CompactTextString(m) }
func (*Timing) ProtoMessage()    {}
func (*Timing) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{7}
}

func (m *Timing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timing.Unmarshal(m, b)
}
func (m *Timing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timing.Marshal(b, m, deterministic)
}
func (m *Timing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timing.Merge(m, src)
}
func (m *Timing) XXX_Size() int {
	return xxx_messageInfo_Timing.Size(m)
}
func (m *Timing) XXX_DiscardUnknown() {
	xxx_messageInfo_Timing.DiscardUnknown(m)
}

var xxx_messageInfo_Timing proto.InternalMessageInfo

func (m *Timing) GetLive() bool {
	if m != nil {
		return m.Live
	}
	return false
}

func (m *Timing) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Timing) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

type Video struct {
	Format               string   `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Codec                string   `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	PixelFormat          string   `protobuf:"bytes,3,opt,name=pixelFormat,proto3" json:"pixelFormat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{8}
}

func (m *Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Video.Unmarshal(m, b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Video.Marshal(b, m, deterministic)
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return xxx_messageInfo_Video.Size(m)
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Video) GetCodec() string {
	if m != nil {
		return m.Codec
	}
	return ""
}

func (m *Video) GetPixelFormat() string {
	if m != nil {
		return m.PixelFormat
	}
	return ""
}

type Audio struct {
	Codec                string   `protobuf:"bytes,1,opt,name=codec,proto3" json:"codec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Audio) Reset()         { *m = Audio{} }
func (m *Audio) String() string { return proto.CompactTextString(m) }
func (*Audio) ProtoMessage()    {}
func (*Audio) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{9}
}

func (m *Audio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Audio.Unmarshal(m, b)
}
func (m *Audio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Audio.Marshal(b, m, deterministic)
}
func (m *Audio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Audio.Merge(m, src)
}
func (m *Audio) XXX_Size() int {
	return xxx_messageInfo_Audio.Size(m)
}
func (m *Audio) XXX_DiscardUnknown() {
	xxx_messageInfo_Audio.DiscardUnknown(m)
}

var xxx_messageInfo_Audio proto.InternalMessageInfo

func (m *Audio) GetCodec() string {
	if m != nil {
		return m.Codec
	}
	return ""
}

type Camera struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HasVideo             bool     `protobuf:"varint,2,opt,name=hasVideo,proto3" json:"hasVideo,omitempty"`
	HasAudio             bool     `protobuf:"varint,3,opt,name=hasAudio,proto3" json:"hasAudio,omitempty"`
	Video                *Video   `protobuf:"bytes,4,opt,name=video,proto3" json:"video,omitempty"`
	Audio                *Audio   `protobuf:"bytes,5,opt,name=audio,proto3" json:"audio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Camera) Reset()         { *m = Camera{} }
func (m *Camera) String() string { return proto.CompactTextString(m) }
func (*Camera) ProtoMessage()    {}
func (*Camera) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{10}
}

func (m *Camera) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Camera.Unmarshal(m, b)
}
func (m *Camera) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Camera.Marshal(b, m, deterministic)
}
func (m *Camera) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Camera.Merge(m, src)
}
func (m *Camera) XXX_Size() int {
	return xxx_messageInfo_Camera.Size(m)
}
func (m *Camera) XXX_DiscardUnknown() {
	xxx_messageInfo_Camera.DiscardUnknown(m)
}

var xxx_messageInfo_Camera proto.InternalMessageInfo

func (m *Camera) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Camera) GetHasVideo() bool {
	if m != nil {
		return m.HasVideo
	}
	return false
}

func (m *Camera) GetHasAudio() bool {
	if m != nil {
		return m.HasAudio
	}
	return false
}

func (m *Camera) GetVideo() *Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *Camera) GetAudio() *Audio {
	if m != nil {
		return m.Audio
	}
	return nil
}

type Result struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorKind            string   `protobuf:"bytes,2,opt,name=errorKind,proto3" json:"errorKind,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{11}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *Result) GetErrorKind() string {
	if m != nil {
		return m.ErrorKind
	}
	return ""
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("lumas_core_stream.SessionStatus_State", SessionStatus_State_name, SessionStatus_State_value)
	proto.RegisterEnum("lumas_core_stream.Source_StreamType", Source_StreamType_name, Source_StreamType_value)
	proto.RegisterType((*RecordSession)(nil), "lumas_core_stream.RecordSession")
	proto.RegisterType((*Session)(nil), "lumas_core_stream.Session")
	proto.RegisterType((*SessionStatus)(nil), "lumas_core_stream.SessionStatus")
	proto.RegisterType((*Annotation)(nil), "lumas_core_stream.Annotation")
	proto.RegisterType((*RTPConfig)(nil), "lumas_core_stream.RTPConfig")
	proto.RegisterType((*Source)(nil), "lumas_core_stream.Source")
	proto.RegisterType((*StreamSourceInfo)(nil), "lumas_core_stream.StreamSourceInfo")
	proto.RegisterType((*Timing)(nil), "lumas_core_stream.Timing")
	proto.RegisterType((*Video)(nil), "lumas_core_stream.Video")
	proto.RegisterType((*Audio)(nil), "lumas_core_stream.Audio")
	proto.RegisterType((*Camera)(nil), "lumas_core_stream.Camera")
	proto.RegisterType((*Result)(nil), "lumas_core_stream.Result")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xed, 0x6e, 0xf3, 0x34,
	0x14, 0x6e, 0x9a, 0x26, 0x4d, 0x4f, 0xb7, 0xa9, 0x58, 0x08, 0x85, 0x6a, 0x2f, 0xaa, 0xcc, 0x2b,
	0xb4, 0x5f, 0x95, 0x28, 0x12, 0x42, 0x08, 0xe9, 0xa5, 0xda, 0x17, 0x83, 0x32, 0x2a, 0xb7, 0x6c,
	0x42, 0xfc, 0x18, 0x5e, 0xe2, 0x6e, 0x91, 0x9a, 0x38, 0xb2, 0x9d, 0xc1, 0xfe, 0x73, 0x41, 0xdc,
	0x04, 0x57, 0xc2, 0x25, 0x70, 0x03, 0x28, 0xb6, 0x69, 0xd3, 0x35, 0x2d, 0x62, 0xbf, 0x9a, 0x73,
	0xfc, 0x9c, 0xa7, 0xe7, 0xe3, 0x39, 0x36, 0x1c, 0x48, 0x25, 0x18, 0x4d, 0x87, 0xb9, 0xe0, 0x8a,
	0xa3, 0xf7, 0x96, 0x45, 0x4a, 0xe5, 0x5d, 0xc4, 0x05, 0xbb, 0x33, 0x07, 0xf8, 0x67, 0x38, 0x24,
	0x2c, 0xe2, 0x22, 0x9e, 0x31, 0x29, 0x13, 0x9e, 0xa1, 0x23, 0x68, 0x26, 0x71, 0xe8, 0x0c, 0x9c,
	0x93, 0x0e, 0x69, 0x26, 0x31, 0xfa, 0x12, 0x3a, 0x42, 0xe5, 0xa7, 0x3c, 0x5b, 0x24, 0x0f, 0xa1,
	0x3b, 0x70, 0x4e, 0xba, 0xa3, 0xe3, 0xe1, 0x16, 0xcf, 0x90, 0xcc, 0xa7, 0x06, 0x43, 0xd6, 0x70,
	0x3c, 0x81, 0xf6, 0x2e, 0xda, 0x4f, 0xc1, 0x97, 0xbc, 0x10, 0x11, 0x0b, 0x9b, 0x9a, 0xf3, 0xc3,
	0x1a, 0xce, 0x99, 0x06, 0x10, 0x0b, 0xc4, 0xbf, 0x37, 0xe1, 0xd0, 0xd2, 0xcd, 0x14, 0x55, 0x85,
	0x44, 0x5f, 0x81, 0x27, 0x15, 0x55, 0x4c, 0xf3, 0x1e, 0x8d, 0x3e, 0xa9, 0xe3, 0xa8, 0x06, 0x0c,
	0xcb, 0x1f, 0x46, 0x4c, 0x10, 0xfa, 0x08, 0x40, 0xb2, 0x4c, 0x5d, 0x08, 0x9a, 0x32, 0xa9, 0xd3,
	0x70, 0x49, 0xc5, 0x83, 0xde, 0xc2, 0x61, 0x2c, 0x78, 0x9e, 0xb3, 0xd8, 0x42, 0x5c, 0x0d, 0xd9,
	0x74, 0xa2, 0x77, 0xd0, 0xa5, 0x59, 0xc6, 0x15, 0x55, 0x09, 0xcf, 0x64, 0xd8, 0x1a, 0xb8, 0x27,
	0xdd, 0xd1, 0x9b, 0x9a, 0x4c, 0xc6, 0x2b, 0x14, 0xa9, 0x46, 0xe0, 0x21, 0x78, 0x3a, 0x2d, 0xd4,
	0x85, 0xf6, 0x74, 0x32, 0xfe, 0xe9, 0xea, 0xfa, 0xb2, 0xd7, 0x40, 0x00, 0xfe, 0x74, 0xfc, 0xe3,
	0xec, 0xfc, 0xac, 0xe7, 0xa0, 0x03, 0x08, 0xe6, 0xe7, 0x63, 0x72, 0xf6, 0xc3, 0xed, 0x75, 0xaf,
	0x89, 0x8f, 0x01, 0xd6, 0x54, 0x2f, 0xfb, 0x8a, 0x25, 0x74, 0x56, 0xa3, 0x28, 0x2b, 0x14, 0x2a,
	0x1f, 0xc7, 0xb1, 0x60, 0x52, 0x5a, 0x50, 0xc5, 0x83, 0x30, 0x1c, 0xd0, 0x22, 0x4e, 0x38, 0x99,
	0x4f, 0xa7, 0x5c, 0x28, 0xdd, 0x03, 0x8f, 0x6c, 0xf8, 0x4a, 0xcc, 0x53, 0x12, 0xb3, 0x15, 0xc6,
	0x35, 0x98, 0xaa, 0x0f, 0xff, 0xe5, 0x80, 0x6f, 0x86, 0xb5, 0x35, 0xe7, 0x2f, 0xa0, 0xa5, 0x9e,
	0x73, 0x33, 0xe5, 0xa3, 0xd1, 0xdb, 0x9d, 0x53, 0x1e, 0xce, 0xb4, 0x35, 0x7f, 0xce, 0x19, 0xd1,
	0x11, 0xa5, 0x42, 0x54, 0x92, 0x26, 0xd9, 0x43, 0xd8, 0xda, 0xa9, 0x90, 0xb9, 0x06, 0x10, 0x0b,
	0xdc, 0xd4, 0xaa, 0xf7, 0xff, 0xb4, 0x3a, 0x00, 0x58, 0xa7, 0x80, 0x3a, 0xe0, 0x7d, 0xff, 0xed,
	0xf4, 0xbc, 0x9c, 0x44, 0x1b, 0x5c, 0x32, 0x9f, 0xf6, 0x1c, 0xfc, 0xa7, 0x03, 0x3d, 0x03, 0x31,
	0x29, 0x5f, 0x65, 0x0b, 0xbe, 0x55, 0x6f, 0x0f, 0x5c, 0x19, 0xe7, 0xba, 0xdc, 0x0e, 0x29, 0x3f,
	0x4b, 0x19, 0x3d, 0x52, 0x39, 0x49, 0x9e, 0x98, 0x09, 0xd6, 0x1d, 0x0c, 0xc8, 0xa6, 0xf3, 0x35,
	0xd5, 0x7e, 0x0e, 0x81, 0x34, 0xea, 0x96, 0xa1, 0xa7, 0x65, 0xd7, 0xdf, 0xbd, 0x00, 0x64, 0x85,
	0xc5, 0x37, 0xe0, 0x1b, 0x26, 0x84, 0xa0, 0xb5, 0x4c, 0x9e, 0xcc, 0xfa, 0x04, 0x44, 0x7f, 0xa3,
	0x63, 0xe8, 0x48, 0x45, 0x85, 0x9a, 0x27, 0x29, 0xb3, 0x4b, 0xb1, 0x76, 0xa0, 0x3e, 0x04, 0x52,
	0xf1, 0x5c, 0x1f, 0x9a, 0x75, 0x58, 0xd9, 0xf8, 0x16, 0xbc, 0x9b, 0x52, 0x15, 0xe8, 0x03, 0xf0,
	0x17, 0x5c, 0xa4, 0x54, 0xd9, 0xbe, 0x58, 0x0b, 0xbd, 0x0f, 0x5e, 0xc4, 0x63, 0x16, 0xd9, 0xee,
	0x18, 0x03, 0x0d, 0xa0, 0x9b, 0x27, 0xbf, 0xb1, 0xe5, 0x85, 0x09, 0x71, 0xf5, 0x59, 0xd5, 0x85,
	0xdf, 0x80, 0x37, 0x2e, 0x25, 0xb9, 0x26, 0x70, 0x2a, 0x04, 0xf8, 0x0f, 0x07, 0xfc, 0x53, 0x9a,
	0x32, 0x41, 0xb7, 0xa6, 0xd1, 0x87, 0xe0, 0x91, 0x4a, 0x9d, 0x95, 0xfe, 0xd3, 0x80, 0xac, 0x6c,
	0x7b, 0xa6, 0x89, 0xed, 0x48, 0x56, 0x36, 0x1a, 0x82, 0xa7, 0x05, 0x6e, 0x87, 0x11, 0xd6, 0xf4,
	0x55, 0x93, 0x10, 0x03, 0x2b, 0xf1, 0x7a, 0x69, 0xac, 0xe8, 0xea, 0xf0, 0x9a, 0x98, 0x18, 0x18,
	0xfe, 0x05, 0x7c, 0xc2, 0x64, 0xb1, 0x54, 0xfa, 0x12, 0x2a, 0xa2, 0x88, 0x49, 0xb9, 0x28, 0x96,
	0x76, 0x10, 0x15, 0x4f, 0x39, 0x0e, 0x26, 0x04, 0x17, 0xdf, 0x25, 0x59, 0x6c, 0xfb, 0xb6, 0x76,
	0xa0, 0x10, 0xda, 0x29, 0x93, 0x92, 0x3e, 0x30, 0xdb, 0xb7, 0x7f, 0xcd, 0xd1, 0xdf, 0x2e, 0xf8,
	0x56, 0x5a, 0x5f, 0x83, 0x27, 0x99, 0x2a, 0x72, 0xb4, 0xfb, 0x8e, 0xed, 0xef, 0x51, 0x0e, 0x6e,
	0xa0, 0x77, 0xd0, 0xca, 0x97, 0xf4, 0x19, 0xed, 0x41, 0xf5, 0xeb, 0xc8, 0x4d, 0x8d, 0xb8, 0x51,
	0xa6, 0x90, 0xd3, 0x42, 0xb2, 0xd7, 0x33, 0x4c, 0x20, 0x88, 0x99, 0x8c, 0x44, 0x72, 0xcf, 0xf6,
	0xd5, 0xf1, 0x71, 0xdd, 0xd1, 0x8b, 0x9d, 0xc5, 0x0d, 0x74, 0x0a, 0x81, 0x62, 0x54, 0xc4, 0xfc,
	0xd7, 0xec, 0xf5, 0x29, 0x7d, 0x03, 0xbe, 0x34, 0xef, 0xd0, 0x3e, 0x8a, 0xc1, 0x7f, 0x3d, 0x4a,
	0xb8, 0x81, 0x2e, 0xc1, 0x17, 0xfa, 0x11, 0xde, 0x57, 0xda, 0xa0, 0x36, 0x97, 0xca, 0xd3, 0x8d,
	0x1b, 0xf7, 0xbe, 0x7e, 0xe7, 0x3f, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x75, 0x29, 0x91, 0xf3,
	0xf7, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	Setup(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Session, error)
	Play(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error)
	Pause(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error)
	Describe(ctx context.Context, in *Source, opts ...grpc.CallOption) (*StreamSourceInfo, error)
	Teardown(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error)
	Status(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionStatus, error)
	Record(ctx context.Context, in *Source, opts ...grpc.CallOption) (*RecordSession, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Setup(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/lumas_core_stream.Stream/setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Play(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_stream.Stream/play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Pause(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_stream.Stream/pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Describe(ctx context.Context, in *Source, opts ...grpc.CallOption) (*StreamSourceInfo, error) {
	out := new(StreamSourceInfo)
	err := c.cc.Invoke(ctx, "/lumas_core_stream.Stream/describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Teardown(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_stream.Stream/teardown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Status(ctx context.Context, in *Session, opts ...grpc.CallOption) (*SessionStatus, error) {
	out := new(SessionStatus)
	err := c.cc.Invoke(ctx, "/lumas_core_stream.Stream/status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Record(ctx context.Context, in *Source, opts ...grpc.CallOption) (*RecordSession, error) {
	out := new(RecordSession)
	err := c.cc.Invoke(ctx, "/lumas_core_stream.Stream/record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	Setup(context.Context, *Source) (*Session, error)
	Play(context.Context, *Session) (*Result, error)
	Pause(context.Context, *Session) (*Result, error)
	Describe(context.Context, *Source) (*StreamSourceInfo, error)
	Teardown(context.Context, *Session) (*Result, error)
	Status(context.Context, *Session) (*SessionStatus, error)
	Record(context.Context, *Source) (*RecordSession, error)
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_stream.Stream/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Setup(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_stream.Stream/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Play(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_stream.Stream/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Pause(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_stream.Stream/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Describe(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_stream.Stream/Teardown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Teardown(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_stream.Stream/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Status(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_stream.Stream/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Record(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lumas_core_stream.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setup",
			Handler:    _Stream_Setup_Handler,
		},
		{
			MethodName: "play",
			Handler:    _Stream_Play_Handler,
		},
		{
			MethodName: "pause",
			Handler:    _Stream_Pause_Handler,
		},
		{
			MethodName: "describe",
			Handler:    _Stream_Describe_Handler,
		},
		{
			MethodName: "teardown",
			Handler:    _Stream_Teardown_Handler,
		},
		{
			MethodName: "status",
			Handler:    _Stream_Status_Handler,
		},
		{
			MethodName: "record",
			Handler:    _Stream_Record_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream.proto",
}
