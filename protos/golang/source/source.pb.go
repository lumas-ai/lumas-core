// Code generated by protoc-gen-go. DO NOT EDIT.
// source: source.proto

package lumas_core_source

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SourceType int32

const (
	SourceType_EVENT  SourceType = 0
	SourceType_CAMERA SourceType = 1
)

var SourceType_name = map[int32]string{
	0: "EVENT",
	1: "CAMERA",
}

var SourceType_value = map[string]int32{
	"EVENT":  0,
	"CAMERA": 1,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}

func (SourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{0}
}

//Empty list request in case we want to
//extend it later without breaking the API
type SourceListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceListRequest) Reset()         { *m = SourceListRequest{} }
func (m *SourceListRequest) String() string { return proto.CompactTextString(m) }
func (*SourceListRequest) ProtoMessage()    {}
func (*SourceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{0}
}

func (m *SourceListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceListRequest.Unmarshal(m, b)
}
func (m *SourceListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceListRequest.Marshal(b, m, deterministic)
}
func (m *SourceListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceListRequest.Merge(m, src)
}
func (m *SourceListRequest) XXX_Size() int {
	return xxx_messageInfo_SourceListRequest.Size(m)
}
func (m *SourceListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SourceListRequest proto.InternalMessageInfo

type SourceInfo struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 SourceType `protobuf:"varint,2,opt,name=type,proto3,enum=lumas_core_source.SourceType" json:"type,omitempty"`
	CameraID             string     `protobuf:"bytes,3,opt,name=CameraID,proto3" json:"CameraID,omitempty"`
	EventID              string     `protobuf:"bytes,4,opt,name=EventID,proto3" json:"EventID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SourceInfo) Reset()         { *m = SourceInfo{} }
func (m *SourceInfo) String() string { return proto.CompactTextString(m) }
func (*SourceInfo) ProtoMessage()    {}
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{1}
}

func (m *SourceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceInfo.Unmarshal(m, b)
}
func (m *SourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceInfo.Marshal(b, m, deterministic)
}
func (m *SourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceInfo.Merge(m, src)
}
func (m *SourceInfo) XXX_Size() int {
	return xxx_messageInfo_SourceInfo.Size(m)
}
func (m *SourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SourceInfo proto.InternalMessageInfo

func (m *SourceInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SourceInfo) GetType() SourceType {
	if m != nil {
		return m.Type
	}
	return SourceType_EVENT
}

func (m *SourceInfo) GetCameraID() string {
	if m != nil {
		return m.CameraID
	}
	return ""
}

func (m *SourceInfo) GetEventID() string {
	if m != nil {
		return m.EventID
	}
	return ""
}

type SourceID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceID) Reset()         { *m = SourceID{} }
func (m *SourceID) String() string { return proto.CompactTextString(m) }
func (*SourceID) ProtoMessage()    {}
func (*SourceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{2}
}

func (m *SourceID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceID.Unmarshal(m, b)
}
func (m *SourceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceID.Marshal(b, m, deterministic)
}
func (m *SourceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceID.Merge(m, src)
}
func (m *SourceID) XXX_Size() int {
	return xxx_messageInfo_SourceID.Size(m)
}
func (m *SourceID) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceID.DiscardUnknown(m)
}

var xxx_messageInfo_SourceID proto.InternalMessageInfo

func (m *SourceID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Result struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorKind            string   `protobuf:"bytes,2,opt,name=errorKind,proto3" json:"errorKind,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_9229c9b6eb8e6b85, []int{3}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *Result) GetErrorKind() string {
	if m != nil {
		return m.ErrorKind
	}
	return ""
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("lumas_core_source.SourceType", SourceType_name, SourceType_value)
	proto.RegisterType((*SourceListRequest)(nil), "lumas_core_source.SourceListRequest")
	proto.RegisterType((*SourceInfo)(nil), "lumas_core_source.SourceInfo")
	proto.RegisterType((*SourceID)(nil), "lumas_core_source.SourceID")
	proto.RegisterType((*Result)(nil), "lumas_core_source.Result")
}

func init() { proto.RegisterFile("source.proto", fileDescriptor_9229c9b6eb8e6b85) }

var fileDescriptor_9229c9b6eb8e6b85 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xdb, 0x4e, 0xc2, 0x40,
	0x10, 0x6d, 0x0b, 0xd6, 0x76, 0x62, 0x08, 0x8c, 0x2f, 0xb5, 0x5e, 0x42, 0xaa, 0x0f, 0xc4, 0x07,
	0xa2, 0xf8, 0x05, 0x48, 0x9b, 0x48, 0xbc, 0x25, 0x95, 0xf8, 0x8a, 0xa5, 0x3b, 0x98, 0x26, 0x85,
	0xd6, 0xdd, 0xad, 0x09, 0x1f, 0xe0, 0x0f, 0xfb, 0x05, 0x86, 0x2d, 0x28, 0x51, 0x81, 0xb7, 0x9d,
	0x39, 0x67, 0xcf, 0x9c, 0x39, 0xbb, 0xb0, 0x27, 0xb2, 0x82, 0xc7, 0xd4, 0xce, 0x79, 0x26, 0x33,
	0x6c, 0xa4, 0xc5, 0x24, 0x12, 0xc3, 0x38, 0xe3, 0x34, 0x2c, 0x01, 0x6f, 0x1f, 0x1a, 0x4f, 0xea,
	0x74, 0x97, 0x08, 0x19, 0xd2, 0x5b, 0x41, 0x42, 0x7a, 0x1f, 0x3a, 0x40, 0xd9, 0xed, 0x4f, 0xc7,
	0x19, 0xd6, 0xc0, 0x48, 0x98, 0xa3, 0x37, 0xf5, 0x96, 0x1d, 0x1a, 0x09, 0xc3, 0x4b, 0xa8, 0xca,
	0x59, 0x4e, 0x8e, 0xd1, 0xd4, 0x5b, 0xb5, 0xce, 0x71, 0xfb, 0x8f, 0x6a, 0xbb, 0xbc, 0x3c, 0x98,
	0xe5, 0x14, 0x2a, 0x2a, 0xba, 0x60, 0xf5, 0xa2, 0x09, 0xf1, 0xa8, 0xef, 0x3b, 0x15, 0x25, 0xf4,
	0x5d, 0xa3, 0x03, 0xbb, 0xc1, 0x3b, 0x4d, 0x65, 0xdf, 0x77, 0xaa, 0x0a, 0x5a, 0x96, 0x9e, 0x0b,
	0xd6, 0xc2, 0x86, 0xff, 0xdb, 0x84, 0xf7, 0x02, 0x66, 0x48, 0xa2, 0x48, 0x25, 0x9e, 0x00, 0x88,
	0x22, 0x8e, 0x49, 0x88, 0x71, 0x91, 0x2a, 0x86, 0x15, 0xae, 0x74, 0xf0, 0x08, 0x6c, 0xe2, 0x3c,
	0xe3, 0xb7, 0xc9, 0x94, 0x29, 0xcf, 0x76, 0xf8, 0xd3, 0x98, 0x4f, 0x9f, 0x90, 0x10, 0xd1, 0x2b,
	0x2d, 0x8c, 0x2d, 0xcb, 0xf3, 0xd3, 0x65, 0x08, 0xf3, 0x3d, 0xd0, 0x86, 0x9d, 0xe0, 0x39, 0x78,
	0x18, 0xd4, 0x35, 0x04, 0x30, 0x7b, 0xdd, 0xfb, 0x20, 0xec, 0xd6, 0xf5, 0xce, 0xa7, 0x01, 0x66,
	0xc9, 0xc2, 0x1e, 0x54, 0x22, 0xc6, 0x70, 0x7d, 0x1e, 0xf3, 0x30, 0xdd, 0xc3, 0xf5, 0xb0, 0xef,
	0x69, 0xf8, 0x08, 0xd5, 0x34, 0x11, 0x12, 0xcf, 0xd6, 0xd2, 0x56, 0x1e, 0xca, 0xdd, 0x3c, 0xcb,
	0xd3, 0x2e, 0x74, 0xf4, 0xc1, 0x2c, 0x72, 0x16, 0x49, 0xda, 0x66, 0xec, 0xe0, 0x1f, 0xb8, 0x4c,
	0xd8, 0xd3, 0xf0, 0x1a, 0x4c, 0x46, 0x29, 0x49, 0xc2, 0x4d, 0xfe, 0x37, 0x6b, 0xdc, 0x80, 0xc5,
	0x48, 0xc4, 0x3c, 0x19, 0x6d, 0x51, 0xd9, 0xb6, 0xd5, 0xc8, 0x54, 0xdf, 0xf9, 0xea, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0xfb, 0xbe, 0x28, 0x00, 0xde, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SourceClient is the client API for Source service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SourceClient interface {
	Add(ctx context.Context, in *SourceInfo, opts ...grpc.CallOption) (*SourceID, error)
	List(ctx context.Context, in *SourceListRequest, opts ...grpc.CallOption) (Source_ListClient, error)
	Update(ctx context.Context, in *SourceInfo, opts ...grpc.CallOption) (*Result, error)
	Delete(ctx context.Context, in *SourceID, opts ...grpc.CallOption) (*Result, error)
	Describe(ctx context.Context, in *SourceID, opts ...grpc.CallOption) (*SourceInfo, error)
}

type sourceClient struct {
	cc *grpc.ClientConn
}

func NewSourceClient(cc *grpc.ClientConn) SourceClient {
	return &sourceClient{cc}
}

func (c *sourceClient) Add(ctx context.Context, in *SourceInfo, opts ...grpc.CallOption) (*SourceID, error) {
	out := new(SourceID)
	err := c.cc.Invoke(ctx, "/lumas_core_source.Source/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) List(ctx context.Context, in *SourceListRequest, opts ...grpc.CallOption) (Source_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Source_serviceDesc.Streams[0], "/lumas_core_source.Source/list", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Source_ListClient interface {
	Recv() (*SourceInfo, error)
	grpc.ClientStream
}

type sourceListClient struct {
	grpc.ClientStream
}

func (x *sourceListClient) Recv() (*SourceInfo, error) {
	m := new(SourceInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sourceClient) Update(ctx context.Context, in *SourceInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_source.Source/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) Delete(ctx context.Context, in *SourceID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_source.Source/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceClient) Describe(ctx context.Context, in *SourceID, opts ...grpc.CallOption) (*SourceInfo, error) {
	out := new(SourceInfo)
	err := c.cc.Invoke(ctx, "/lumas_core_source.Source/describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServer is the server API for Source service.
type SourceServer interface {
	Add(context.Context, *SourceInfo) (*SourceID, error)
	List(*SourceListRequest, Source_ListServer) error
	Update(context.Context, *SourceInfo) (*Result, error)
	Delete(context.Context, *SourceID) (*Result, error)
	Describe(context.Context, *SourceID) (*SourceInfo, error)
}

// UnimplementedSourceServer can be embedded to have forward compatible implementations.
type UnimplementedSourceServer struct {
}

func (*UnimplementedSourceServer) Add(ctx context.Context, req *SourceInfo) (*SourceID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedSourceServer) List(req *SourceListRequest, srv Source_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedSourceServer) Update(ctx context.Context, req *SourceInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSourceServer) Delete(ctx context.Context, req *SourceID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSourceServer) Describe(ctx context.Context, req *SourceID) (*SourceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}

func RegisterSourceServer(s *grpc.Server, srv SourceServer) {
	s.RegisterService(&_Source_serviceDesc, srv)
}

func _Source_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_source.Source/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).Add(ctx, req.(*SourceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SourceListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourceServer).List(m, &sourceListServer{stream})
}

type Source_ListServer interface {
	Send(*SourceInfo) error
	grpc.ServerStream
}

type sourceListServer struct {
	grpc.ServerStream
}

func (x *sourceListServer) Send(m *SourceInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Source_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_source.Source/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).Update(ctx, req.(*SourceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_source.Source/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).Delete(ctx, req.(*SourceID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Source_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_source.Source/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServer).Describe(ctx, req.(*SourceID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Source_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lumas_core_source.Source",
	HandlerType: (*SourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _Source_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Source_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Source_Delete_Handler,
		},
		{
			MethodName: "describe",
			Handler:    _Source_Describe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "list",
			Handler:       _Source_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "source.proto",
}
