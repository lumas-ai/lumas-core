// Code generated by protoc-gen-go. DO NOT EDIT.
// source: camera.proto

package lumas_core_camera

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//It's unlikely we'll ever want to pass arguments to list
// but this message is hear just in case
type ListRequest struct {
	CameraID             []*CameraID `protobuf:"bytes,1,rep,name=cameraID,proto3" json:"cameraID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{0}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetCameraID() []*CameraID {
	if m != nil {
		return m.CameraID
	}
	return nil
}

type CameraID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CameraID) Reset()         { *m = CameraID{} }
func (m *CameraID) String() string { return proto.CompactTextString(m) }
func (*CameraID) ProtoMessage()    {}
func (*CameraID) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{1}
}

func (m *CameraID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraID.Unmarshal(m, b)
}
func (m *CameraID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraID.Marshal(b, m, deterministic)
}
func (m *CameraID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraID.Merge(m, src)
}
func (m *CameraID) XXX_Size() int {
	return xxx_messageInfo_CameraID.Size(m)
}
func (m *CameraID) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraID.DiscardUnknown(m)
}

var xxx_messageInfo_CameraID proto.InternalMessageInfo

func (m *CameraID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CameraConfig struct {
	Camera               *CameraInfo     `protobuf:"bytes,1,opt,name=camera,proto3" json:"camera,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Provider             string          `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	ProviderAddress      string          `protobuf:"bytes,4,opt,name=providerAddress,proto3" json:"providerAddress,omitempty"`
	ProviderConfig       *_struct.Struct `protobuf:"bytes,5,opt,name=providerConfig,proto3" json:"providerConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CameraConfig) Reset()         { *m = CameraConfig{} }
func (m *CameraConfig) String() string { return proto.CompactTextString(m) }
func (*CameraConfig) ProtoMessage()    {}
func (*CameraConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{2}
}

func (m *CameraConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraConfig.Unmarshal(m, b)
}
func (m *CameraConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraConfig.Marshal(b, m, deterministic)
}
func (m *CameraConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraConfig.Merge(m, src)
}
func (m *CameraConfig) XXX_Size() int {
	return xxx_messageInfo_CameraConfig.Size(m)
}
func (m *CameraConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CameraConfig proto.InternalMessageInfo

func (m *CameraConfig) GetCamera() *CameraInfo {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *CameraConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CameraConfig) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *CameraConfig) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *CameraConfig) GetProviderConfig() *_struct.Struct {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

type CameraInfo struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Info                 *CameraInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	VideoFormat          string      `protobuf:"bytes,4,opt,name=videoFormat,proto3" json:"videoFormat,omitempty"`
	AudioFormat          string      `protobuf:"bytes,5,opt,name=audioFormat,proto3" json:"audioFormat,omitempty"`
	PixFormat            string      `protobuf:"bytes,6,opt,name=pixFormat,proto3" json:"pixFormat,omitempty"`
	FrameRate            int32       `protobuf:"varint,7,opt,name=frameRate,proto3" json:"frameRate,omitempty"`
	Provider             string      `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CameraInfo) Reset()         { *m = CameraInfo{} }
func (m *CameraInfo) String() string { return proto.CompactTextString(m) }
func (*CameraInfo) ProtoMessage()    {}
func (*CameraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{3}
}

func (m *CameraInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraInfo.Unmarshal(m, b)
}
func (m *CameraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraInfo.Marshal(b, m, deterministic)
}
func (m *CameraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraInfo.Merge(m, src)
}
func (m *CameraInfo) XXX_Size() int {
	return xxx_messageInfo_CameraInfo.Size(m)
}
func (m *CameraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CameraInfo proto.InternalMessageInfo

func (m *CameraInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CameraInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CameraInfo) GetInfo() *CameraInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CameraInfo) GetVideoFormat() string {
	if m != nil {
		return m.VideoFormat
	}
	return ""
}

func (m *CameraInfo) GetAudioFormat() string {
	if m != nil {
		return m.AudioFormat
	}
	return ""
}

func (m *CameraInfo) GetPixFormat() string {
	if m != nil {
		return m.PixFormat
	}
	return ""
}

func (m *CameraInfo) GetFrameRate() int32 {
	if m != nil {
		return m.FrameRate
	}
	return 0
}

func (m *CameraInfo) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type Result struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorKind            string   `protobuf:"bytes,2,opt,name=errorKind,proto3" json:"errorKind,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f444de3b23b55d1, []int{4}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *Result) GetErrorKind() string {
	if m != nil {
		return m.ErrorKind
	}
	return ""
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ListRequest)(nil), "lumas_core_camera.ListRequest")
	proto.RegisterType((*CameraID)(nil), "lumas_core_camera.CameraID")
	proto.RegisterType((*CameraConfig)(nil), "lumas_core_camera.CameraConfig")
	proto.RegisterType((*CameraInfo)(nil), "lumas_core_camera.CameraInfo")
	proto.RegisterType((*Result)(nil), "lumas_core_camera.Result")
}

func init() { proto.RegisterFile("camera.proto", fileDescriptor_2f444de3b23b55d1) }

var fileDescriptor_2f444de3b23b55d1 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x95, 0x26, 0x4d, 0xd3, 0xd3, 0x69, 0x08, 0xdf, 0x10, 0xc2, 0x18, 0x51, 0xae, 0x72,
	0x95, 0x41, 0x11, 0xe2, 0x0e, 0xa8, 0x86, 0x2a, 0x4d, 0x70, 0x65, 0x1e, 0x60, 0xb8, 0xb1, 0x53,
	0x59, 0x4a, 0xe2, 0x60, 0x3b, 0x13, 0xef, 0xc3, 0x8b, 0xf1, 0x26, 0xa0, 0xd8, 0xc9, 0x9a, 0x6d,
	0x5d, 0x2b, 0xed, 0x2e, 0xfe, 0xcf, 0x7f, 0x7c, 0x7e, 0x7f, 0x8e, 0xe1, 0x24, 0x27, 0x15, 0x93,
	0x24, 0x6b, 0xa4, 0xd0, 0x02, 0x3d, 0x2f, 0xdb, 0x8a, 0xa8, 0xeb, 0x5c, 0x48, 0x76, 0x6d, 0x0b,
	0xd1, 0xd9, 0x56, 0x88, 0x6d, 0xc9, 0x2e, 0x8c, 0x61, 0xd3, 0x16, 0x17, 0x4a, 0xcb, 0x36, 0xd7,
	0xb6, 0x21, 0x59, 0xc3, 0xe2, 0x3b, 0x57, 0x1a, 0xb3, 0x5f, 0x2d, 0x53, 0x1a, 0x7d, 0x84, 0xc0,
	0xb6, 0x5d, 0x7d, 0x0d, 0x9d, 0xd8, 0x4d, 0x17, 0xcb, 0x57, 0xd9, 0x83, 0x2d, 0xb3, 0xcb, 0xde,
	0x82, 0x6f, 0xcd, 0x49, 0x04, 0xc1, 0xa0, 0xa2, 0x53, 0x98, 0x70, 0x1a, 0x3a, 0xb1, 0x93, 0xba,
	0x78, 0xc2, 0x69, 0xf2, 0xd7, 0x81, 0x13, 0x5b, 0xbc, 0x14, 0x75, 0xc1, 0xb7, 0xe8, 0x03, 0xf8,
	0xb6, 0xd1, 0x98, 0x16, 0xcb, 0xd7, 0x8f, 0xcf, 0xa8, 0x0b, 0x81, 0x7b, 0x33, 0x42, 0xe0, 0xd5,
	0xa4, 0x62, 0xe1, 0x24, 0x76, 0xd2, 0x39, 0x36, 0xdf, 0x28, 0x82, 0xa0, 0x91, 0xe2, 0x86, 0x53,
	0x26, 0x43, 0xd7, 0xe8, 0xb7, 0x6b, 0x94, 0xc2, 0xb3, 0xe1, 0x7b, 0x45, 0xa9, 0x64, 0x4a, 0x85,
	0x9e, 0xb1, 0xdc, 0x97, 0xd1, 0x67, 0x38, 0x1d, 0x24, 0x1b, 0x31, 0x9c, 0x9a, 0x60, 0x2f, 0x32,
	0x0b, 0x2f, 0x1b, 0xe0, 0x65, 0x3f, 0x0c, 0x3c, 0x7c, 0xcf, 0x9e, 0xfc, 0x73, 0x00, 0x76, 0x89,
	0x47, 0x04, 0xe6, 0x1d, 0x81, 0xbd, 0xc9, 0xdf, 0x81, 0xc7, 0xeb, 0x42, 0x98, 0xd4, 0x47, 0x11,
	0x18, 0x2b, 0x8a, 0x61, 0xd1, 0x0d, 0x15, 0x6b, 0x21, 0x2b, 0xa2, 0xfb, 0xc3, 0x8c, 0xa5, 0xce,
	0x41, 0x5a, 0xca, 0x07, 0xc7, 0xd4, 0x3a, 0x46, 0x12, 0x3a, 0x83, 0x79, 0xc3, 0x7f, 0xf7, 0x75,
	0xdf, 0xd4, 0x77, 0x42, 0x57, 0x2d, 0x24, 0xa9, 0x18, 0x26, 0x9a, 0x85, 0xb3, 0xd8, 0x49, 0xa7,
	0x78, 0x27, 0xdc, 0x81, 0x1d, 0xdc, 0x85, 0x9d, 0xfc, 0x04, 0x1f, 0x33, 0xd5, 0x96, 0x1a, 0x9d,
	0x03, 0xa8, 0x36, 0xcf, 0x99, 0x52, 0x45, 0x5b, 0x1a, 0x08, 0x01, 0x1e, 0x29, 0xdd, 0x0c, 0x26,
	0xa5, 0x90, 0xdf, 0x78, 0x4d, 0x7b, 0x22, 0x3b, 0x01, 0x85, 0x30, 0xab, 0x98, 0x52, 0x64, 0xcb,
	0xfa, 0xfb, 0x1c, 0x96, 0xcb, 0x3f, 0x2e, 0xf8, 0x16, 0x09, 0x5a, 0x81, 0x4b, 0x28, 0x45, 0x6f,
	0x1e, 0x85, 0x66, 0xaf, 0x25, 0x7a, 0xb9, 0xc7, 0xd0, 0xa7, 0xbc, 0x02, 0xaf, 0xe4, 0x4a, 0xa3,
	0xf3, 0x3d, 0x96, 0xd1, 0x8b, 0x88, 0x8e, 0xcd, 0x78, 0xeb, 0xa0, 0x2f, 0xe0, 0x4b, 0x56, 0x89,
	0x1b, 0x86, 0x0e, 0x3d, 0x96, 0x43, 0x61, 0x3e, 0x81, 0xa7, 0xb4, 0x68, 0x9e, 0xdc, 0xbf, 0x82,
	0x59, 0x23, 0x45, 0x07, 0xf8, 0xc9, 0x5b, 0xac, 0x21, 0xa0, 0x4c, 0xe5, 0x92, 0x6f, 0x8e, 0x1c,
	0xe3, 0xf0, 0x9f, 0xba, 0xf1, 0xcd, 0x53, 0x79, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x48, 0xfb,
	0xbd, 0xd4, 0x98, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraClient interface {
	Add(ctx context.Context, in *CameraConfig, opts ...grpc.CallOption) (*Result, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Camera_ListClient, error)
	Remove(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*Result, error)
	Stop(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*Result, error)
	Process(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*Result, error)
	Describe(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*CameraInfo, error)
}

type cameraClient struct {
	cc *grpc.ClientConn
}

func NewCameraClient(cc *grpc.ClientConn) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) Add(ctx context.Context, in *CameraConfig, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_camera.Camera/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Camera_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Camera_serviceDesc.Streams[0], "/lumas_core_camera.Camera/list", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Camera_ListClient interface {
	Recv() (*CameraConfig, error)
	grpc.ClientStream
}

type cameraListClient struct {
	grpc.ClientStream
}

func (x *cameraListClient) Recv() (*CameraConfig, error) {
	m := new(CameraConfig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraClient) Remove(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_camera.Camera/remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) Stop(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_camera.Camera/stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) Process(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/lumas_core_camera.Camera/process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraClient) Describe(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*CameraInfo, error) {
	out := new(CameraInfo)
	err := c.cc.Invoke(ctx, "/lumas_core_camera.Camera/describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServer is the server API for Camera service.
type CameraServer interface {
	Add(context.Context, *CameraConfig) (*Result, error)
	List(*ListRequest, Camera_ListServer) error
	Remove(context.Context, *CameraID) (*Result, error)
	Stop(context.Context, *CameraID) (*Result, error)
	Process(context.Context, *CameraID) (*Result, error)
	Describe(context.Context, *CameraID) (*CameraInfo, error)
}

// UnimplementedCameraServer can be embedded to have forward compatible implementations.
type UnimplementedCameraServer struct {
}

func (*UnimplementedCameraServer) Add(ctx context.Context, req *CameraConfig) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCameraServer) List(req *ListRequest, srv Camera_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCameraServer) Remove(ctx context.Context, req *CameraID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedCameraServer) Stop(ctx context.Context, req *CameraID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedCameraServer) Process(ctx context.Context, req *CameraID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (*UnimplementedCameraServer) Describe(ctx context.Context, req *CameraID) (*CameraInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}

func RegisterCameraServer(s *grpc.Server, srv CameraServer) {
	s.RegisterService(&_Camera_serviceDesc, srv)
}

func _Camera_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_camera.Camera/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Add(ctx, req.(*CameraConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServer).List(m, &cameraListServer{stream})
}

type Camera_ListServer interface {
	Send(*CameraConfig) error
	grpc.ServerStream
}

type cameraListServer struct {
	grpc.ServerStream
}

func (x *cameraListServer) Send(m *CameraConfig) error {
	return x.ServerStream.SendMsg(m)
}

func _Camera_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_camera.Camera/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Remove(ctx, req.(*CameraID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_camera.Camera/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Stop(ctx, req.(*CameraID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_camera.Camera/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Process(ctx, req.(*CameraID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Camera_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lumas_core_camera.Camera/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Describe(ctx, req.(*CameraID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Camera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lumas_core_camera.Camera",
	HandlerType: (*CameraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _Camera_Add_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _Camera_Remove_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _Camera_Stop_Handler,
		},
		{
			MethodName: "process",
			Handler:    _Camera_Process_Handler,
		},
		{
			MethodName: "describe",
			Handler:    _Camera_Describe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "list",
			Handler:       _Camera_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "camera.proto",
}
