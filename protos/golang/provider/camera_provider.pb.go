// Code generated by protoc-gen-go. DO NOT EDIT.
// source: camera_provider.proto

package provider

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RTPConfig struct {
	RtpAddress           string        `protobuf:"bytes,1,opt,name=rtpAddress,proto3" json:"rtpAddress,omitempty"`
	AudioRTPPort         int32         `protobuf:"varint,2,opt,name=audioRTPPort,proto3" json:"audioRTPPort,omitempty"`
	VideoRTPPort         int32         `protobuf:"varint,3,opt,name=videoRTPPort,proto3" json:"videoRTPPort,omitempty"`
	CameraConfig         *CameraConfig `protobuf:"bytes,4,opt,name=cameraConfig,proto3" json:"cameraConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RTPConfig) Reset()         { *m = RTPConfig{} }
func (m *RTPConfig) String() string { return proto.CompactTextString(m) }
func (*RTPConfig) ProtoMessage()    {}
func (*RTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_05823ca79099bb93, []int{0}
}

func (m *RTPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RTPConfig.Unmarshal(m, b)
}
func (m *RTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RTPConfig.Marshal(b, m, deterministic)
}
func (m *RTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RTPConfig.Merge(m, src)
}
func (m *RTPConfig) XXX_Size() int {
	return xxx_messageInfo_RTPConfig.Size(m)
}
func (m *RTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RTPConfig proto.InternalMessageInfo

func (m *RTPConfig) GetRtpAddress() string {
	if m != nil {
		return m.RtpAddress
	}
	return ""
}

func (m *RTPConfig) GetAudioRTPPort() int32 {
	if m != nil {
		return m.AudioRTPPort
	}
	return 0
}

func (m *RTPConfig) GetVideoRTPPort() int32 {
	if m != nil {
		return m.VideoRTPPort
	}
	return 0
}

func (m *RTPConfig) GetCameraConfig() *CameraConfig {
	if m != nil {
		return m.CameraConfig
	}
	return nil
}

type StreamInfo struct {
	Sdp                  *SDP     `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	SentFrames           int64    `protobuf:"varint,2,opt,name=sentFrames,proto3" json:"sentFrames,omitempty"`
	DroppedFrames        int64    `protobuf:"varint,3,opt,name=droppedFrames,proto3" json:"droppedFrames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamInfo) Reset()         { *m = StreamInfo{} }
func (m *StreamInfo) String() string { return proto.CompactTextString(m) }
func (*StreamInfo) ProtoMessage()    {}
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_05823ca79099bb93, []int{1}
}

func (m *StreamInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamInfo.Unmarshal(m, b)
}
func (m *StreamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamInfo.Marshal(b, m, deterministic)
}
func (m *StreamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamInfo.Merge(m, src)
}
func (m *StreamInfo) XXX_Size() int {
	return xxx_messageInfo_StreamInfo.Size(m)
}
func (m *StreamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StreamInfo proto.InternalMessageInfo

func (m *StreamInfo) GetSdp() *SDP {
	if m != nil {
		return m.Sdp
	}
	return nil
}

func (m *StreamInfo) GetSentFrames() int64 {
	if m != nil {
		return m.SentFrames
	}
	return 0
}

func (m *StreamInfo) GetDroppedFrames() int64 {
	if m != nil {
		return m.DroppedFrames
	}
	return 0
}

type SDP struct {
	Sdp                  string   `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	Audio                string   `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	Video                string   `protobuf:"bytes,3,opt,name=video,proto3" json:"video,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SDP) Reset()         { *m = SDP{} }
func (m *SDP) String() string { return proto.CompactTextString(m) }
func (*SDP) ProtoMessage()    {}
func (*SDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_05823ca79099bb93, []int{2}
}

func (m *SDP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SDP.Unmarshal(m, b)
}
func (m *SDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SDP.Marshal(b, m, deterministic)
}
func (m *SDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SDP.Merge(m, src)
}
func (m *SDP) XXX_Size() int {
	return xxx_messageInfo_SDP.Size(m)
}
func (m *SDP) XXX_DiscardUnknown() {
	xxx_messageInfo_SDP.DiscardUnknown(m)
}

var xxx_messageInfo_SDP proto.InternalMessageInfo

func (m *SDP) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

func (m *SDP) GetAudio() string {
	if m != nil {
		return m.Audio
	}
	return ""
}

func (m *SDP) GetVideo() string {
	if m != nil {
		return m.Video
	}
	return ""
}

type Image struct {
	Base64Image          string   `protobuf:"bytes,1,opt,name=base64Image,proto3" json:"base64Image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_05823ca79099bb93, []int{3}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetBase64Image() string {
	if m != nil {
		return m.Base64Image
	}
	return ""
}

type VideoPacket struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Size                 int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoPacket) Reset()         { *m = VideoPacket{} }
func (m *VideoPacket) String() string { return proto.CompactTextString(m) }
func (*VideoPacket) ProtoMessage()    {}
func (*VideoPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_05823ca79099bb93, []int{4}
}

func (m *VideoPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoPacket.Unmarshal(m, b)
}
func (m *VideoPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoPacket.Marshal(b, m, deterministic)
}
func (m *VideoPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoPacket.Merge(m, src)
}
func (m *VideoPacket) XXX_Size() int {
	return xxx_messageInfo_VideoPacket.Size(m)
}
func (m *VideoPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoPacket.DiscardUnknown(m)
}

var xxx_messageInfo_VideoPacket proto.InternalMessageInfo

func (m *VideoPacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VideoPacket) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type CameraConfig struct {
	Config               *_struct.Struct `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CameraConfig) Reset()         { *m = CameraConfig{} }
func (m *CameraConfig) String() string { return proto.CompactTextString(m) }
func (*CameraConfig) ProtoMessage()    {}
func (*CameraConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_05823ca79099bb93, []int{5}
}

func (m *CameraConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraConfig.Unmarshal(m, b)
}
func (m *CameraConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraConfig.Marshal(b, m, deterministic)
}
func (m *CameraConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraConfig.Merge(m, src)
}
func (m *CameraConfig) XXX_Size() int {
	return xxx_messageInfo_CameraConfig.Size(m)
}
func (m *CameraConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CameraConfig proto.InternalMessageInfo

func (m *CameraConfig) GetConfig() *_struct.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

type Result struct {
	Successful           bool     `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	ErrorKind            string   `protobuf:"bytes,2,opt,name=errorKind,proto3" json:"errorKind,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_05823ca79099bb93, []int{6}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *Result) GetErrorKind() string {
	if m != nil {
		return m.ErrorKind
	}
	return ""
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*RTPConfig)(nil), "provider.RTPConfig")
	proto.RegisterType((*StreamInfo)(nil), "provider.StreamInfo")
	proto.RegisterType((*SDP)(nil), "provider.SDP")
	proto.RegisterType((*Image)(nil), "provider.Image")
	proto.RegisterType((*VideoPacket)(nil), "provider.VideoPacket")
	proto.RegisterType((*CameraConfig)(nil), "provider.CameraConfig")
	proto.RegisterType((*Result)(nil), "provider.Result")
}

func init() { proto.RegisterFile("camera_provider.proto", fileDescriptor_05823ca79099bb93) }

var fileDescriptor_05823ca79099bb93 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x37, 0x64, 0x5b, 0x9a, 0x69, 0x57, 0xa0, 0x61, 0x81, 0xaa, 0x5a, 0x41, 0x65, 0x71,
	0x28, 0x97, 0x14, 0x15, 0x96, 0xc3, 0x5e, 0x10, 0xea, 0x0a, 0xa9, 0xe2, 0x12, 0xb9, 0x15, 0x57,
	0x70, 0x63, 0xb7, 0x44, 0x34, 0x71, 0x64, 0x3b, 0x1c, 0xe0, 0xa1, 0x78, 0x45, 0x94, 0x71, 0xda,
	0xa4, 0x87, 0xbd, 0x79, 0x3e, 0xff, 0x1e, 0xcf, 0x3f, 0x33, 0xf0, 0x3c, 0x15, 0xb9, 0x32, 0xe2,
	0x7b, 0x69, 0xf4, 0xef, 0x4c, 0x2a, 0x13, 0x97, 0x46, 0x3b, 0x8d, 0x83, 0x63, 0x3c, 0xb9, 0xd9,
	0x6b, 0xbd, 0x3f, 0xa8, 0x39, 0xf1, 0x6d, 0xb5, 0x9b, 0x5b, 0x67, 0xaa, 0xd4, 0x79, 0x1d, 0xfb,
	0x17, 0x40, 0xc4, 0x37, 0xc9, 0x52, 0x17, 0xbb, 0x6c, 0x8f, 0xaf, 0x00, 0x8c, 0x2b, 0x3f, 0x4b,
	0x69, 0x94, 0xb5, 0xe3, 0x60, 0x1a, 0xcc, 0x22, 0xde, 0x21, 0xc8, 0x60, 0x24, 0x2a, 0x99, 0x69,
	0xbe, 0x49, 0x12, 0x6d, 0xdc, 0xf8, 0xd1, 0x34, 0x98, 0xf5, 0xf8, 0x19, 0xab, 0x35, 0xf5, 0xc7,
	0x27, 0x4d, 0xe8, 0x35, 0x5d, 0x86, 0x77, 0x30, 0xf2, 0x65, 0xfb, 0x7f, 0xc7, 0x97, 0xd3, 0x60,
	0x36, 0x5c, 0xbc, 0x88, 0x4f, 0x26, 0x96, 0x9d, 0x5b, 0x7e, 0xa6, 0x65, 0x16, 0x60, 0xed, 0x8c,
	0x12, 0xf9, 0xaa, 0xd8, 0x69, 0x7c, 0x0d, 0xa1, 0x95, 0x25, 0x95, 0x3a, 0x5c, 0x5c, 0xb5, 0x09,
	0xd6, 0xf7, 0x09, 0xaf, 0x6f, 0x6a, 0x4b, 0x56, 0x15, 0xee, 0x8b, 0x11, 0xb9, 0xb2, 0x54, 0x70,
	0xc8, 0x3b, 0x04, 0xdf, 0xc0, 0x95, 0x34, 0xba, 0x2c, 0x95, 0x6c, 0x24, 0x21, 0x49, 0xce, 0x21,
	0x5b, 0x42, 0xb8, 0xbe, 0x4f, 0xf0, 0x69, 0xfb, 0x5b, 0xe4, 0xd3, 0x5f, 0x43, 0x8f, 0xdc, 0x53,
	0xe6, 0x88, 0xfb, 0xa0, 0xa6, 0xe4, 0x97, 0x92, 0x45, 0xdc, 0x07, 0xec, 0x2d, 0xf4, 0x56, 0xb9,
	0xd8, 0x2b, 0x9c, 0xc2, 0x70, 0x2b, 0xac, 0xfa, 0xf8, 0x81, 0xc2, 0x26, 0x5d, 0x17, 0xb1, 0x5b,
	0x18, 0x7e, 0xab, 0xdf, 0x24, 0x22, 0xfd, 0xa5, 0x1c, 0x22, 0x5c, 0x4a, 0xe1, 0x04, 0x29, 0x47,
	0x9c, 0xce, 0x35, 0xb3, 0xd9, 0x1f, 0xd5, 0xcc, 0x80, 0xce, 0xec, 0x13, 0x8c, 0xba, 0x9d, 0xc3,
	0x39, 0xf4, 0x53, 0xdf, 0x61, 0xdf, 0xa0, 0x97, 0xb1, 0x5f, 0x86, 0xf8, 0xb8, 0x0c, 0xf1, 0x9a,
	0x96, 0x81, 0x37, 0x32, 0xf6, 0x03, 0xfa, 0x5c, 0xd9, 0xea, 0xe0, 0xa8, 0x6f, 0x55, 0x9a, 0x2a,
	0x6b, 0x77, 0xd5, 0x81, 0x9e, 0x0f, 0x78, 0x87, 0xe0, 0x0d, 0x44, 0xca, 0x18, 0x6d, 0xbe, 0x66,
	0x85, 0x6c, 0xcc, 0xb7, 0x00, 0xc7, 0xf0, 0x38, 0x57, 0xd6, 0xd6, 0xee, 0x7c, 0x0b, 0x8e, 0xe1,
	0xe2, 0x2f, 0xf4, 0x7d, 0x89, 0x78, 0x07, 0x91, 0x1f, 0x24, 0xdf, 0x24, 0xf8, 0xac, 0x1d, 0xdd,
	0x69, 0x1d, 0x27, 0xd7, 0x9d, 0x79, 0x9e, 0x46, 0xce, 0x2e, 0xde, 0x05, 0x78, 0x0b, 0x03, 0x5b,
	0x88, 0xd2, 0xfe, 0xd4, 0x0e, 0x1f, 0x58, 0x9b, 0xc9, 0x93, 0x96, 0xfb, 0xa6, 0x5e, 0x6c, 0xfb,
	0xe4, 0xfb, 0xfd, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x9f, 0x67, 0x6e, 0x35, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraClient interface {
	StreamRTP(ctx context.Context, in *RTPConfig, opts ...grpc.CallOption) (Camera_StreamRTPClient, error)
	Snapshot(ctx context.Context, in *CameraConfig, opts ...grpc.CallOption) (*Image, error)
}

type cameraClient struct {
	cc *grpc.ClientConn
}

func NewCameraClient(cc *grpc.ClientConn) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) StreamRTP(ctx context.Context, in *RTPConfig, opts ...grpc.CallOption) (Camera_StreamRTPClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Camera_serviceDesc.Streams[0], "/provider.Camera/StreamRTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &cameraStreamRTPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Camera_StreamRTPClient interface {
	Recv() (*StreamInfo, error)
	grpc.ClientStream
}

type cameraStreamRTPClient struct {
	grpc.ClientStream
}

func (x *cameraStreamRTPClient) Recv() (*StreamInfo, error) {
	m := new(StreamInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cameraClient) Snapshot(ctx context.Context, in *CameraConfig, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/provider.Camera/snapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServer is the server API for Camera service.
type CameraServer interface {
	StreamRTP(*RTPConfig, Camera_StreamRTPServer) error
	Snapshot(context.Context, *CameraConfig) (*Image, error)
}

func RegisterCameraServer(s *grpc.Server, srv CameraServer) {
	s.RegisterService(&_Camera_serviceDesc, srv)
}

func _Camera_StreamRTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RTPConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServer).StreamRTP(m, &cameraStreamRTPServer{stream})
}

type Camera_StreamRTPServer interface {
	Send(*StreamInfo) error
	grpc.ServerStream
}

type cameraStreamRTPServer struct {
	grpc.ServerStream
}

func (x *cameraStreamRTPServer) Send(m *StreamInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Camera_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.Camera/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Snapshot(ctx, req.(*CameraConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Camera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provider.Camera",
	HandlerType: (*CameraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "snapshot",
			Handler:    _Camera_Snapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRTP",
			Handler:       _Camera_StreamRTP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "camera_provider.proto",
}
