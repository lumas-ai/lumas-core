// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

package player

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Camera struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Camera) Reset()         { *m = Camera{} }
func (m *Camera) String() string { return proto.CompactTextString(m) }
func (*Camera) ProtoMessage()    {}
func (*Camera) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{0}
}

func (m *Camera) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Camera.Unmarshal(m, b)
}
func (m *Camera) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Camera.Marshal(b, m, deterministic)
}
func (m *Camera) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Camera.Merge(m, src)
}
func (m *Camera) XXX_Size() int {
	return xxx_messageInfo_Camera.Size(m)
}
func (m *Camera) XXX_DiscardUnknown() {
	xxx_messageInfo_Camera.DiscardUnknown(m)
}

var xxx_messageInfo_Camera proto.InternalMessageInfo

func (m *Camera) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type VideoPacket struct {
	Packet               []byte   `protobuf:"bytes,1,opt,name=packet,proto3" json:"packet,omitempty"`
	Codec                string   `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoPacket) Reset()         { *m = VideoPacket{} }
func (m *VideoPacket) String() string { return proto.CompactTextString(m) }
func (*VideoPacket) ProtoMessage()    {}
func (*VideoPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{1}
}

func (m *VideoPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoPacket.Unmarshal(m, b)
}
func (m *VideoPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoPacket.Marshal(b, m, deterministic)
}
func (m *VideoPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoPacket.Merge(m, src)
}
func (m *VideoPacket) XXX_Size() int {
	return xxx_messageInfo_VideoPacket.Size(m)
}
func (m *VideoPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoPacket.DiscardUnknown(m)
}

var xxx_messageInfo_VideoPacket proto.InternalMessageInfo

func (m *VideoPacket) GetPacket() []byte {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *VideoPacket) GetCodec() string {
	if m != nil {
		return m.Codec
	}
	return ""
}

type Video struct {
	StartPresentationTimeStamp int32    `protobuf:"varint,1,opt,name=startPresentationTimeStamp,proto3" json:"startPresentationTimeStamp,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{2}
}

func (m *Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Video.Unmarshal(m, b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Video.Marshal(b, m, deterministic)
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return xxx_messageInfo_Video.Size(m)
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetStartPresentationTimeStamp() int32 {
	if m != nil {
		return m.StartPresentationTimeStamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Camera)(nil), "player.Camera")
	proto.RegisterType((*VideoPacket)(nil), "player.VideoPacket")
	proto.RegisterType((*Video)(nil), "player.Video")
}

func init() { proto.RegisterFile("player.proto", fileDescriptor_41d803d1b635d5c6) }

var fileDescriptor_41d803d1b635d5c6 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x31, 0x4b, 0x04, 0x31,
	0x10, 0x85, 0xcd, 0xc2, 0x06, 0x1d, 0xcf, 0x2b, 0x46, 0x91, 0xe5, 0xaa, 0x23, 0xd5, 0x55, 0x87,
	0x9e, 0xa5, 0x60, 0x63, 0x61, 0x7b, 0xec, 0x89, 0xfd, 0x6c, 0x32, 0x45, 0x58, 0xb3, 0x09, 0xd9,
	0x69, 0xfc, 0xf7, 0x62, 0xb2, 0x82, 0x16, 0xda, 0xbd, 0x8f, 0x79, 0x8f, 0x79, 0x33, 0xb0, 0x4a,
	0xef, 0xf4, 0xc1, 0x79, 0x9f, 0x72, 0x94, 0x88, 0xba, 0x92, 0xe9, 0x40, 0x3f, 0x53, 0xe0, 0x4c,
	0xb8, 0x86, 0xc6, 0xbb, 0x4e, 0x6d, 0xd5, 0xae, 0xed, 0x1b, 0xef, 0xcc, 0x23, 0x5c, 0xbe, 0x79,
	0xc7, 0xf1, 0x48, 0x76, 0x64, 0xc1, 0x5b, 0xd0, 0xa9, 0xa8, 0x62, 0x59, 0xf5, 0x0b, 0xe1, 0x0d,
	0xb4, 0x36, 0x3a, 0xb6, 0x5d, 0xb3, 0x55, 0xbb, 0x8b, 0xbe, 0x82, 0x79, 0x81, 0xb6, 0x84, 0xf1,
	0x09, 0x36, 0xb3, 0x50, 0x96, 0x63, 0xe6, 0x99, 0x27, 0x21, 0xf1, 0x71, 0x7a, 0xf5, 0x81, 0x4f,
	0x42, 0x21, 0x2d, 0xdb, 0xfe, 0x71, 0x1c, 0x22, 0xe8, 0x93, 0x64, 0xa6, 0x80, 0xf7, 0xa0, 0xe7,
	0xaa, 0xd6, 0xfb, 0xe5, 0x94, 0xda, 0x7c, 0x73, 0xfd, 0xcd, 0x3f, 0xfa, 0x9a, 0xb3, 0x3b, 0x85,
	0x07, 0x38, 0xff, 0x9a, 0x0c, 0x64, 0x47, 0xbc, 0xfa, 0x65, 0xfa, 0x33, 0x33, 0xe8, 0xf2, 0x9f,
	0x87, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xf8, 0x61, 0xdd, 0x2f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	Stream(ctx context.Context, in *Camera, opts ...grpc.CallOption) (Stream_StreamClient, error)
	Playback(ctx context.Context, in *Video, opts ...grpc.CallOption) (Stream_PlaybackClient, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Stream(ctx context.Context, in *Camera, opts ...grpc.CallOption) (Stream_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/player.Stream/stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_StreamClient interface {
	Recv() (*VideoPacket, error)
	grpc.ClientStream
}

type streamStreamClient struct {
	grpc.ClientStream
}

func (x *streamStreamClient) Recv() (*VideoPacket, error) {
	m := new(VideoPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Playback(ctx context.Context, in *Video, opts ...grpc.CallOption) (Stream_PlaybackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[1], "/player.Stream/playback", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamPlaybackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_PlaybackClient interface {
	Recv() (*VideoPacket, error)
	grpc.ClientStream
}

type streamPlaybackClient struct {
	grpc.ClientStream
}

func (x *streamPlaybackClient) Recv() (*VideoPacket, error) {
	m := new(VideoPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	Stream(*Camera, Stream_StreamServer) error
	Playback(*Video, Stream_PlaybackServer) error
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Camera)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).Stream(m, &streamStreamServer{stream})
}

type Stream_StreamServer interface {
	Send(*VideoPacket) error
	grpc.ServerStream
}

type streamStreamServer struct {
	grpc.ServerStream
}

func (x *streamStreamServer) Send(m *VideoPacket) error {
	return x.ServerStream.SendMsg(m)
}

func _Stream_Playback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Video)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).Playback(m, &streamPlaybackServer{stream})
}

type Stream_PlaybackServer interface {
	Send(*VideoPacket) error
	grpc.ServerStream
}

type streamPlaybackServer struct {
	grpc.ServerStream
}

func (x *streamPlaybackServer) Send(m *VideoPacket) error {
	return x.ServerStream.SendMsg(m)
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "player.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "stream",
			Handler:       _Stream_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "playback",
			Handler:       _Stream_Playback_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "player.proto",
}
